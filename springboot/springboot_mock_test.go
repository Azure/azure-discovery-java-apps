// Code generated by MockGen. DO NOT EDIT.
// Source: ./springboot/contract.go

// Package springboot is a generated GoMock package.
package springboot

import (
	context "context"
	io "io"
	os "os"
	reflect "reflect"
	time "time"

	mvnparser "github.com/creekorful/mvnparser"
	gomock "github.com/golang/mock/gomock"
)

// MockDiscoveryExecutor is a mock of DiscoveryExecutor interface.
type MockDiscoveryExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryExecutorMockRecorder
}

// MockDiscoveryExecutorMockRecorder is the mock recorder for MockDiscoveryExecutor.
type MockDiscoveryExecutorMockRecorder struct {
	mock *MockDiscoveryExecutor
}

// NewMockDiscoveryExecutor creates a new mock instance.
func NewMockDiscoveryExecutor(ctrl *gomock.Controller) *MockDiscoveryExecutor {
	mock := &MockDiscoveryExecutor{ctrl: ctrl}
	mock.recorder = &MockDiscoveryExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoveryExecutor) EXPECT() *MockDiscoveryExecutorMockRecorder {
	return m.recorder
}

// Discover mocks base method.
func (m *MockDiscoveryExecutor) Discover(ctx context.Context, server ServerConnectionInfo) ([]*SpringBootApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discover", ctx, server)
	ret0, _ := ret[0].([]*SpringBootApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Discover indicates an expected call of Discover.
func (mr *MockDiscoveryExecutorMockRecorder) Discover(ctx, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discover", reflect.TypeOf((*MockDiscoveryExecutor)(nil).Discover), ctx, server)
}

// MockCredentialProvider is a mock of CredentialProvider interface.
type MockCredentialProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialProviderMockRecorder
}

// MockCredentialProviderMockRecorder is the mock recorder for MockCredentialProvider.
type MockCredentialProviderMockRecorder struct {
	mock *MockCredentialProvider
}

// NewMockCredentialProvider creates a new mock instance.
func NewMockCredentialProvider(ctrl *gomock.Controller) *MockCredentialProvider {
	mock := &MockCredentialProvider{ctrl: ctrl}
	mock.recorder = &MockCredentialProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialProvider) EXPECT() *MockCredentialProviderMockRecorder {
	return m.recorder
}

// GetCredentials mocks base method.
func (m *MockCredentialProvider) GetCredentials() ([]*Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials")
	ret0, _ := ret[0].([]*Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockCredentialProviderMockRecorder) GetCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockCredentialProvider)(nil).GetCredentials))
}

// MockServerDiscovery is a mock of ServerDiscovery interface.
type MockServerDiscovery struct {
	ctrl     *gomock.Controller
	recorder *MockServerDiscoveryMockRecorder
}

// MockServerDiscoveryMockRecorder is the mock recorder for MockServerDiscovery.
type MockServerDiscoveryMockRecorder struct {
	mock *MockServerDiscovery
}

// NewMockServerDiscovery creates a new mock instance.
func NewMockServerDiscovery(ctrl *gomock.Controller) *MockServerDiscovery {
	mock := &MockServerDiscovery{ctrl: ctrl}
	mock.recorder = &MockServerDiscoveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerDiscovery) EXPECT() *MockServerDiscoveryMockRecorder {
	return m.recorder
}

// Finish mocks base method.
func (m *MockServerDiscovery) Finish() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finish")
	ret0, _ := ret[0].(error)
	return ret0
}

// Finish indicates an expected call of Finish.
func (mr *MockServerDiscoveryMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockServerDiscovery)(nil).Finish))
}

// GetOsName mocks base method.
func (m *MockServerDiscovery) GetOsName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOsName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOsName indicates an expected call of GetOsName.
func (mr *MockServerDiscoveryMockRecorder) GetOsName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOsName", reflect.TypeOf((*MockServerDiscovery)(nil).GetOsName))
}

// GetOsVersion mocks base method.
func (m *MockServerDiscovery) GetOsVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOsVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOsVersion indicates an expected call of GetOsVersion.
func (mr *MockServerDiscoveryMockRecorder) GetOsVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOsVersion", reflect.TypeOf((*MockServerDiscovery)(nil).GetOsVersion))
}

// GetTotalMemoryInKB mocks base method.
func (m *MockServerDiscovery) GetTotalMemoryInKB() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalMemoryInKB")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalMemoryInKB indicates an expected call of GetTotalMemoryInKB.
func (mr *MockServerDiscoveryMockRecorder) GetTotalMemoryInKB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalMemoryInKB", reflect.TypeOf((*MockServerDiscovery)(nil).GetTotalMemoryInKB))
}

// Prepare mocks base method.
func (m *MockServerDiscovery) Prepare() (*Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare")
	ret0, _ := ret[0].(*Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockServerDiscoveryMockRecorder) Prepare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockServerDiscovery)(nil).Prepare))
}

// ProcessScan mocks base method.
func (m *MockServerDiscovery) ProcessScan() ([]JavaProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessScan")
	ret0, _ := ret[0].([]JavaProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessScan indicates an expected call of ProcessScan.
func (mr *MockServerDiscoveryMockRecorder) ProcessScan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessScan", reflect.TypeOf((*MockServerDiscovery)(nil).ProcessScan))
}

// ReadJarFile mocks base method.
func (m *MockServerDiscovery) ReadJarFile(location string, walkers ...JarFileWalker) (JarFile, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{location}
	for _, a := range walkers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadJarFile", varargs...)
	ret0, _ := ret[0].(JarFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadJarFile indicates an expected call of ReadJarFile.
func (mr *MockServerDiscoveryMockRecorder) ReadJarFile(location interface{}, walkers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{location}, walkers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJarFile", reflect.TypeOf((*MockServerDiscovery)(nil).ReadJarFile), varargs...)
}

// Server mocks base method.
func (m *MockServerDiscovery) Server() ServerConnector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Server")
	ret0, _ := ret[0].(ServerConnector)
	return ret0
}

// Server indicates an expected call of Server.
func (mr *MockServerDiscoveryMockRecorder) Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Server", reflect.TypeOf((*MockServerDiscovery)(nil).Server))
}

// MockJarFile is a mock of JarFile interface.
type MockJarFile struct {
	ctrl     *gomock.Controller
	recorder *MockJarFileMockRecorder
}

// MockJarFileMockRecorder is the mock recorder for MockJarFile.
type MockJarFileMockRecorder struct {
	mock *MockJarFile
}

// NewMockJarFile creates a new mock instance.
func NewMockJarFile(ctrl *gomock.Controller) *MockJarFile {
	mock := &MockJarFile{ctrl: ctrl}
	mock.recorder = &MockJarFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJarFile) EXPECT() *MockJarFileMockRecorder {
	return m.recorder
}

// GetAppName mocks base method.
func (m *MockJarFile) GetAppName(process JavaProcess) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppName", process)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppName indicates an expected call of GetAppName.
func (mr *MockJarFileMockRecorder) GetAppName(process interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppName", reflect.TypeOf((*MockJarFile)(nil).GetAppName), process)
}

// GetAppPort mocks base method.
func (m *MockJarFile) GetAppPort(process JavaProcess) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppPort", process)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppPort indicates an expected call of GetAppPort.
func (mr *MockJarFileMockRecorder) GetAppPort(process interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppPort", reflect.TypeOf((*MockJarFile)(nil).GetAppPort), process)
}

// GetAppType mocks base method.
func (m *MockJarFile) GetAppType() AppType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppType")
	ret0, _ := ret[0].(AppType)
	return ret0
}

// GetAppType indicates an expected call of GetAppType.
func (mr *MockJarFileMockRecorder) GetAppType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppType", reflect.TypeOf((*MockJarFile)(nil).GetAppType))
}

// GetApplicationConfigurations mocks base method.
func (m *MockJarFile) GetApplicationConfigurations() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationConfigurations")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationConfigurations indicates an expected call of GetApplicationConfigurations.
func (mr *MockJarFileMockRecorder) GetApplicationConfigurations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationConfigurations", reflect.TypeOf((*MockJarFile)(nil).GetApplicationConfigurations))
}

// GetArtifactGroup mocks base method.
func (m *MockJarFile) GetArtifactGroup() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactGroup")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactGroup indicates an expected call of GetArtifactGroup.
func (mr *MockJarFileMockRecorder) GetArtifactGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactGroup", reflect.TypeOf((*MockJarFile)(nil).GetArtifactGroup))
}

// GetArtifactName mocks base method.
func (m *MockJarFile) GetArtifactName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactName indicates an expected call of GetArtifactName.
func (mr *MockJarFileMockRecorder) GetArtifactName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactName", reflect.TypeOf((*MockJarFile)(nil).GetArtifactName))
}

// GetArtifactVersion mocks base method.
func (m *MockJarFile) GetArtifactVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactVersion indicates an expected call of GetArtifactVersion.
func (mr *MockJarFileMockRecorder) GetArtifactVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactVersion", reflect.TypeOf((*MockJarFile)(nil).GetArtifactVersion))
}

// GetBuildJdkVersion mocks base method.
func (m *MockJarFile) GetBuildJdkVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildJdkVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildJdkVersion indicates an expected call of GetBuildJdkVersion.
func (mr *MockJarFileMockRecorder) GetBuildJdkVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildJdkVersion", reflect.TypeOf((*MockJarFile)(nil).GetBuildJdkVersion))
}

// GetCertificates mocks base method.
func (m *MockJarFile) GetCertificates() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificates")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificates indicates an expected call of GetCertificates.
func (mr *MockJarFileMockRecorder) GetCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockJarFile)(nil).GetCertificates))
}

// GetChecksum mocks base method.
func (m *MockJarFile) GetChecksum() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChecksum")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChecksum indicates an expected call of GetChecksum.
func (mr *MockJarFileMockRecorder) GetChecksum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChecksum", reflect.TypeOf((*MockJarFile)(nil).GetChecksum))
}

// GetDependencies mocks base method.
func (m *MockJarFile) GetDependencies() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDependencies")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDependencies indicates an expected call of GetDependencies.
func (mr *MockJarFileMockRecorder) GetDependencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependencies", reflect.TypeOf((*MockJarFile)(nil).GetDependencies))
}

// GetLastModifiedTime mocks base method.
func (m *MockJarFile) GetLastModifiedTime() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastModifiedTime")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastModifiedTime indicates an expected call of GetLastModifiedTime.
func (mr *MockJarFileMockRecorder) GetLastModifiedTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastModifiedTime", reflect.TypeOf((*MockJarFile)(nil).GetLastModifiedTime))
}

// GetLocation mocks base method.
func (m *MockJarFile) GetLocation() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockJarFileMockRecorder) GetLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockJarFile)(nil).GetLocation))
}

// GetLoggingFiles mocks base method.
func (m *MockJarFile) GetLoggingFiles() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggingFiles")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggingFiles indicates an expected call of GetLoggingFiles.
func (mr *MockJarFileMockRecorder) GetLoggingFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggingFiles", reflect.TypeOf((*MockJarFile)(nil).GetLoggingFiles))
}

// GetManifests mocks base method.
func (m *MockJarFile) GetManifests() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManifests")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetManifests indicates an expected call of GetManifests.
func (mr *MockJarFileMockRecorder) GetManifests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifests", reflect.TypeOf((*MockJarFile)(nil).GetManifests))
}

// GetMavenProject mocks base method.
func (m *MockJarFile) GetMavenProject() *mvnparser.MavenProject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMavenProject")
	ret0, _ := ret[0].(*mvnparser.MavenProject)
	return ret0
}

// GetMavenProject indicates an expected call of GetMavenProject.
func (mr *MockJarFileMockRecorder) GetMavenProject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMavenProject", reflect.TypeOf((*MockJarFile)(nil).GetMavenProject))
}

// GetSize mocks base method.
func (m *MockJarFile) GetSize() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSize indicates an expected call of GetSize.
func (mr *MockJarFileMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockJarFile)(nil).GetSize))
}

// GetSpringBootVersion mocks base method.
func (m *MockJarFile) GetSpringBootVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpringBootVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpringBootVersion indicates an expected call of GetSpringBootVersion.
func (mr *MockJarFileMockRecorder) GetSpringBootVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpringBootVersion", reflect.TypeOf((*MockJarFile)(nil).GetSpringBootVersion))
}

// GetStaticFiles mocks base method.
func (m *MockJarFile) GetStaticFiles() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaticFiles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaticFiles indicates an expected call of GetStaticFiles.
func (mr *MockJarFileMockRecorder) GetStaticFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticFiles", reflect.TypeOf((*MockJarFile)(nil).GetStaticFiles))
}

// MockJavaProcess is a mock of JavaProcess interface.
type MockJavaProcess struct {
	ctrl     *gomock.Controller
	recorder *MockJavaProcessMockRecorder
}

// MockJavaProcessMockRecorder is the mock recorder for MockJavaProcess.
type MockJavaProcessMockRecorder struct {
	mock *MockJavaProcess
}

// NewMockJavaProcess creates a new mock instance.
func NewMockJavaProcess(ctrl *gomock.Controller) *MockJavaProcess {
	mock := &MockJavaProcess{ctrl: ctrl}
	mock.recorder = &MockJavaProcessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJavaProcess) EXPECT() *MockJavaProcessMockRecorder {
	return m.recorder
}

// Executor mocks base method.
func (m *MockJavaProcess) Executor() ServerDiscovery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Executor")
	ret0, _ := ret[0].(ServerDiscovery)
	return ret0
}

// Executor indicates an expected call of Executor.
func (mr *MockJavaProcessMockRecorder) Executor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Executor", reflect.TypeOf((*MockJavaProcess)(nil).Executor))
}

// GetEnvironments mocks base method.
func (m *MockJavaProcess) GetEnvironments() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironments")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironments indicates an expected call of GetEnvironments.
func (mr *MockJavaProcessMockRecorder) GetEnvironments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironments", reflect.TypeOf((*MockJavaProcess)(nil).GetEnvironments))
}

// GetJavaCmd mocks base method.
func (m *MockJavaProcess) GetJavaCmd() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJavaCmd")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJavaCmd indicates an expected call of GetJavaCmd.
func (mr *MockJavaProcessMockRecorder) GetJavaCmd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJavaCmd", reflect.TypeOf((*MockJavaProcess)(nil).GetJavaCmd))
}

// GetJvmMemoryInMb mocks base method.
func (m *MockJavaProcess) GetJvmMemoryInMb() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJvmMemoryInMb")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJvmMemoryInMb indicates an expected call of GetJvmMemoryInMb.
func (mr *MockJavaProcessMockRecorder) GetJvmMemoryInMb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJvmMemoryInMb", reflect.TypeOf((*MockJavaProcess)(nil).GetJvmMemoryInMb))
}

// GetJvmOptions mocks base method.
func (m *MockJavaProcess) GetJvmOptions() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJvmOptions")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJvmOptions indicates an expected call of GetJvmOptions.
func (mr *MockJavaProcessMockRecorder) GetJvmOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJvmOptions", reflect.TypeOf((*MockJavaProcess)(nil).GetJvmOptions))
}

// GetPorts mocks base method.
func (m *MockJavaProcess) GetPorts() ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPorts")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPorts indicates an expected call of GetPorts.
func (mr *MockJavaProcessMockRecorder) GetPorts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPorts", reflect.TypeOf((*MockJavaProcess)(nil).GetPorts))
}

// GetProcessId mocks base method.
func (m *MockJavaProcess) GetProcessId() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessId")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetProcessId indicates an expected call of GetProcessId.
func (mr *MockJavaProcessMockRecorder) GetProcessId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessId", reflect.TypeOf((*MockJavaProcess)(nil).GetProcessId))
}

// GetRuntimeJdkVersion mocks base method.
func (m *MockJavaProcess) GetRuntimeJdkVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeJdkVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntimeJdkVersion indicates an expected call of GetRuntimeJdkVersion.
func (mr *MockJavaProcessMockRecorder) GetRuntimeJdkVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeJdkVersion", reflect.TypeOf((*MockJavaProcess)(nil).GetRuntimeJdkVersion))
}

// LocateJarFile mocks base method.
func (m *MockJavaProcess) LocateJarFile() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocateJarFile")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocateJarFile indicates an expected call of LocateJarFile.
func (mr *MockJavaProcessMockRecorder) LocateJarFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocateJarFile", reflect.TypeOf((*MockJavaProcess)(nil).LocateJarFile))
}

// MockServerConnector is a mock of ServerConnector interface.
type MockServerConnector struct {
	ctrl     *gomock.Controller
	recorder *MockServerConnectorMockRecorder
}

// MockServerConnectorMockRecorder is the mock recorder for MockServerConnector.
type MockServerConnectorMockRecorder struct {
	mock *MockServerConnector
}

// NewMockServerConnector creates a new mock instance.
func NewMockServerConnector(ctrl *gomock.Controller) *MockServerConnector {
	mock := &MockServerConnector{ctrl: ctrl}
	mock.recorder = &MockServerConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerConnector) EXPECT() *MockServerConnectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockServerConnector) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServerConnectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockServerConnector)(nil).Close))
}

// Connect mocks base method.
func (m *MockServerConnector) Connect(username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockServerConnectorMockRecorder) Connect(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockServerConnector)(nil).Connect), username, password)
}

// FQDN mocks base method.
func (m *MockServerConnector) FQDN() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FQDN")
	ret0, _ := ret[0].(string)
	return ret0
}

// FQDN indicates an expected call of FQDN.
func (mr *MockServerConnectorMockRecorder) FQDN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FQDN", reflect.TypeOf((*MockServerConnector)(nil).FQDN))
}

// Read mocks base method.
func (m *MockServerConnector) Read(remoteLocation string) (io.ReaderAt, os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", remoteLocation)
	ret0, _ := ret[0].(io.ReaderAt)
	ret1, _ := ret[1].(os.FileInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockServerConnectorMockRecorder) Read(remoteLocation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockServerConnector)(nil).Read), remoteLocation)
}

// RunCmd mocks base method.
func (m *MockServerConnector) RunCmd(cmd string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCmd", cmd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCmd indicates an expected call of RunCmd.
func (mr *MockServerConnectorMockRecorder) RunCmd(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCmd", reflect.TypeOf((*MockServerConnector)(nil).RunCmd), cmd)
}

// Username mocks base method.
func (m *MockServerConnector) Username() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Username")
	ret0, _ := ret[0].(string)
	return ret0
}

// Username indicates an expected call of Username.
func (mr *MockServerConnectorMockRecorder) Username() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Username", reflect.TypeOf((*MockServerConnector)(nil).Username))
}

// MockServerConnectorFactory is a mock of ServerConnectorFactory interface.
type MockServerConnectorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockServerConnectorFactoryMockRecorder
}

// MockServerConnectorFactoryMockRecorder is the mock recorder for MockServerConnectorFactory.
type MockServerConnectorFactoryMockRecorder struct {
	mock *MockServerConnectorFactory
}

// NewMockServerConnectorFactory creates a new mock instance.
func NewMockServerConnectorFactory(ctrl *gomock.Controller) *MockServerConnectorFactory {
	mock := &MockServerConnectorFactory{ctrl: ctrl}
	mock.recorder = &MockServerConnectorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerConnectorFactory) EXPECT() *MockServerConnectorFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockServerConnectorFactory) Create(ctx context.Context, host string, port int) ServerConnector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, host, port)
	ret0, _ := ret[0].(ServerConnector)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServerConnectorFactoryMockRecorder) Create(ctx, host, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServerConnectorFactory)(nil).Create), ctx, host, port)
}
